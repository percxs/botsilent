local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Aim Assist',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Main = Window:AddTab('Aim Assist'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Main Settings')
local RightGroupBox = Tabs.Main:AddRightGroupbox('Prediction')
local SmoothingGroupBox = Tabs.Main:AddLeftGroupbox('Smoothing')
local EasingGroupBox = Tabs.Main:AddRightGroupbox('Easing')
local HumanizerGroupBox = Tabs.Main:AddLeftGroupbox('Humanizer')

local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera
local RunService = game:GetService('RunService')

local AimAssistInstance = {}
local AimAssistEnabled = false
local fov = nil

LeftGroupBox:AddToggle('AimAssistEnabled', {
    Text = 'Aim Assist',
    Default = false,
    Tooltip = 'Enable/disable aim assist functionality'
})

LeftGroupBox:AddSlider('FOV', {
    Text = 'FOV',
    Default = 1000,
    Min = 100,
    Max = 2000,
    Rounding = 0,
    Tooltip = 'Field of view for target detection'
})

LeftGroupBox:AddDropdown('HitPart', {
    Values = {'Head', 'HumanoidRootPart', 'UpperTorso', 'LowerTorso'},
    Default = 1,
    Text = 'Hit Part',
    Tooltip = 'Target body part'
})

LeftGroupBox:AddToggle('ClosestMode', {
    Text = 'Closest Mode',
    Default = false,
    Tooltip = 'Target closest body part instead of specific part'
})

LeftGroupBox:AddToggle('FOVVisible', {
    Text = 'FOV Visible',
    Default = false,
    Tooltip = 'Show FOV circle'
})

LeftGroupBox:AddLabel('Aim Key'):AddKeyPicker('AimKey', {
    Default = 'C',
    Mode = 'Toggle',
    Text = 'Aim Assist Keybind',
    NoUI = false,
})

RightGroupBox:AddSlider('XPrediction', {
    Text = 'X Prediction',
    Default = 0.0223,
    Min = 0,
    Max = 0.1,
    Rounding = 4,
    Tooltip = 'X-axis bullet prediction value'
})

RightGroupBox:AddSlider('YPrediction', {
    Text = 'Y Prediction',
    Default = 0.0223,
    Min = 0,
    Max = 0.1,
    Rounding = 4,
    Tooltip = 'Y-axis bullet prediction value (for air targets)'
})

RightGroupBox:AddSlider('ZPrediction', {
    Text = 'Z Prediction',
    Default = 0.0223,
    Min = 0,
    Max = 0.1,
    Rounding = 4,
    Tooltip = 'Z-axis bullet prediction value'
})

SmoothingGroupBox:AddSlider('XSmoothing', {
    Text = 'X Smoothing',
    Default = 1,
    Min = 0.1,
    Max = 10,
    Rounding = 1,
    Tooltip = 'X-axis smoothing strength'
})

SmoothingGroupBox:AddSlider('YSmoothing', {
    Text = 'Y Smoothing',
    Default = 1,
    Min = 0.1,
    Max = 10,
    Rounding = 1,
    Tooltip = 'Y-axis smoothing strength (for air targets)'
})

SmoothingGroupBox:AddSlider('ZSmoothing', {
    Text = 'Z Smoothing',
    Default = 1,
    Min = 0.1,
    Max = 10,
    Rounding = 1,
    Tooltip = 'Z-axis smoothing strength'
})

EasingGroupBox:AddDropdown('EasingDirection', {
    Values = {'In', 'Out', 'InOut'},
    Default = 1,
    Text = 'Easing Direction',
    Tooltip = 'Easing direction'
})

EasingGroupBox:AddDropdown('FirstEasing', {
    Values = {'Linear', 'Quad', 'Cubic', 'Quart', 'Quint', 'Sine', 'Expo', 'Circ', 'Back', 'Elastic', 'Bounce'},
    Default = 1,
    Text = 'First Easing',
    Tooltip = 'How the aim assist starts'
})

EasingGroupBox:AddDropdown('SecondEasing', {
    Values = {'Linear', 'Quad', 'Cubic', 'Quart', 'Quint', 'Sine', 'Expo', 'Circ', 'Back', 'Elastic', 'Bounce'},
    Default = 1,
    Text = 'Second Easing',
    Tooltip = 'How the aim assist ends'
})

HumanizerGroupBox:AddSlider('Sample1', {
    Text = 'Sample 1',
    Default = 1.0,
    Min = -2,
    Max = 2,
    Rounding = 1,
    Tooltip = 'Humanizer sample 1'
})

HumanizerGroupBox:AddSlider('Sample2', {
    Text = 'Sample 2',
    Default = -0.7,
    Min = -2,
    Max = 2,
    Rounding = 1,
    Tooltip = 'Humanizer sample 2'
})

HumanizerGroupBox:AddSlider('Sample3', {
    Text = 'Sample 3',
    Default = -0.9,
    Min = -2,
    Max = 2,
    Rounding = 1,
    Tooltip = 'Humanizer sample 3'
})

HumanizerGroupBox:AddSlider('Sample4', {
    Text = 'Sample 4',
    Default = 1.2,
    Min = -2,
    Max = 2,
    Rounding = 1,
    Tooltip = 'Humanizer sample 4'
})

HumanizerGroupBox:AddSlider('Sample5', {
    Text = 'Sample 5',
    Default = 0.8,
    Min = -2,
    Max = 2,
    Rounding = 1,
    Tooltip = 'Humanizer sample 5'
})

HumanizerGroupBox:AddSlider('Sample6', {
    Text = 'Sample 6',
    Default = 0.5,
    Min = -2,
    Max = 2,
    Rounding = 1,
    Tooltip = 'Humanizer sample 6'
})

local samples = {
    {1.0, -0.7}, {-0.9, 1.2}, {0.8, 0.5}, {-1.0, -0.8},
    {0.6, -1.2}, {-0.7, 1.0}, {0.9, 0.9}, {-1.1, 0.7},
    {0.8, -1.0}, {-0.9, -0.9}, {1.2, 0.3}, {-0.3, 1.3}
}

local function getClosestPart(character)
    if not character then return nil end
    
    local parts = {}
    local bodyParts = {
        'Head', 'HumanoidRootPart',
        'UpperTorso', 'LowerTorso',
        'LeftUpperArm', 'RightUpperArm', 'LeftLowerArm', 'RightLowerArm',
        'LeftUpperLeg', 'RightUpperLeg', 'LeftLowerLeg', 'RightLowerLeg',
        'LeftFoot', 'RightFoot', 'LeftHand', 'RightHand'
    }
    
    for _, partName in pairs(bodyParts) do
        local part = character:FindFirstChild(partName)
        if part then
            table.insert(parts, part)
        end
    end
    
    local closestPart = nil
    local closestDist = math.huge
    
    for _, part in pairs(parts) do
        local screenPos, onScreen = Camera:WorldToScreenPoint(part.Position)
        if onScreen then
            local dist = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
            if dist < closestDist then
                closestDist = dist
                closestPart = part
            end
        end
    end
    
    return closestPart
end

local function isInAir(character)
    if not character or not character:FindFirstChild('HumanoidRootPart') then return false end
    local rootPart = character.HumanoidRootPart
    local raycast = workspace:Raycast(rootPart.Position, Vector3.new(0, -10, 0))
    return raycast == nil
end

local function applyHumanizer(input)
    local sample = samples[math.random(1, #samples)]
    return input + (sample[1] * 0.01) + (sample[2] * 0.01)
end

local function getValidPlayers()
    local validPlayers = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local character = player.Character
            local humanoid = character:FindFirstChild('Humanoid')
            local rootPart = character:FindFirstChild('HumanoidRootPart')
            
            if humanoid and rootPart and humanoid.Health > 0 then
                local targetPart = nil
                if Toggles.ClosestMode.Value then
                    targetPart = getClosestPart(character) or (character:FindFirstChild('Head') or rootPart)
                else
                    targetPart = character:FindFirstChild(Options.HitPart.Value) or (character:FindFirstChild('Head') or rootPart)
                end
                
                if targetPart then
                    table.insert(validPlayers, {
                        player = player,
                        character = character,
                        targetPart = targetPart
                    })
                end
            end
        end
    end
    
    local dummy = workspace:FindFirstChild('Bots') and workspace.Bots:FindFirstChild('Dummy')
    if dummy and dummy:FindFirstChild('HumanoidRootPart') and dummy:FindFirstChild('Humanoid') and dummy.Humanoid.Health > 0 then
        local targetPart = nil
        if Toggles.ClosestMode.Value then
            targetPart = getClosestPart(dummy) or (dummy.Head or dummy.HumanoidRootPart)
        else
            targetPart = dummy:FindFirstChild(Options.HitPart.Value) or (dummy.Head or dummy.HumanoidRootPart)
        end
        
        if targetPart then
            table.insert(validPlayers, {
                player = nil,
                character = dummy,
                targetPart = targetPart
            })
        end
    end
    
    return validPlayers
end

local function initializeAimAssist()
    if AimAssistInstance.fov then
        AimAssistInstance.fov:Remove()
    end
    if AimAssistInstance.connections then
        for _, connection in pairs(AimAssistInstance.connections) do
            if connection and connection.Disconnect then
                connection:Disconnect()
            end
        end
    end
    
    AimAssistInstance = {}
    
    if Drawing then
        fov = Drawing.new('Circle')
        fov.Thickness = 1
        fov.Radius = Options.FOV.Value
        fov.Color = Color3.fromRGB(0, 255, 0)
        fov.Filled = false
        fov.Transparency = 1
        fov.Visible = Toggles.FOVVisible.Value
        fov.Position = Vector2.new(Mouse.X, Mouse.Y + 55)
        AimAssistInstance.fov = fov
    else
        fov = nil
        AimAssistInstance.fov = nil
    end
    
    AimAssistInstance.connections = {}
    
    local renderConnection = RunService.RenderStepped:Connect(function()
        if fov then
            fov.Position = Vector2.new(Mouse.X, Mouse.Y + 55)
            fov.Visible = Toggles.FOVVisible.Value
            fov.Radius = Options.FOV.Value
        end
    end)
    
    table.insert(AimAssistInstance.connections, renderConnection)
    
    local keyConnection = Mouse.KeyDown:Connect(function(key)
        if key:lower() == Options.AimKey.Value:lower() then
            AimAssistEnabled = not AimAssistEnabled
            if fov then
                fov.Color = AimAssistEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            end
        end
    end)
    
    table.insert(AimAssistInstance.connections, keyConnection)
    
end

Toggles.AimAssistEnabled:OnChanged(function()
    if Toggles.AimAssistEnabled.Value then
        initializeAimAssist()
    else
        if AimAssistInstance.fov then
            AimAssistInstance.fov:Remove()
        end
        if AimAssistInstance.connections then
            for _, connection in pairs(AimAssistInstance.connections) do
                if connection and connection.Disconnect then
                    connection:Disconnect()
                end
            end
        end
        if AimAssistInstance.hook then
            restoremetamethod(game, '__index', AimAssistInstance.hook)
        end
    end
end)

Options.AimKey:OnChanged(function()
    AimAssistEnabled = false
    if fov then
        fov.Color = Color3.fromRGB(255, 0, 0)
    end
end)

Library:SetWatermarkVisibility(true)
Library:SetWatermark('Aim Assist | LinoriaLib')

Library:OnUnload(function()
    if AimAssistInstance and AimAssistInstance.fov then
        AimAssistInstance.fov:Remove()
    end
    if AimAssistInstance and AimAssistInstance.connections then
        for _, connection in pairs(AimAssistInstance.connections) do
            if connection and connection.Disconnect then
                connection:Disconnect()
            end
        end
    end
    if AimAssistInstance and AimAssistInstance.hook then
        restoremetamethod(game, '__index', AimAssistInstance.hook)
    end
    Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('AimAssistScript')
SaveManager:SetFolder('AimAssistScript/game')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()


-- loadstring(game:HttpGet('https://raw.githubusercontent.com/percxs/botsilent/refs/heads/main/inlinoria'))()
